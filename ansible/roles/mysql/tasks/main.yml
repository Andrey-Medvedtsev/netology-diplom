---
- name: Add variables
  include_vars: "vars.yml"
- name: Install node-exporter
  apt: 
    name: 
      - prometheus-node-exporter
    state: present
    update_cache: yes
- name: Install the mysql packages
  apt: 
    name:
      - "{{ item }}"
    state: present
  with_items:
    - "{{ mysql_packages }}"
- name: Install Required pip modules
  pip:
    name:
      - PyMySQL
    state: present
    executable: pip3
- name: Copy the my.cnf file
  template:
    src: "my.cnf.j2"
    dest: "{{ mysql_conf_dir }}/my.cnf"
  notify:
   - restart mysql
- name: Create the directory /etc/mysql/conf.d
  file:
    path: /etc/mysql/conf.d
    state: directory
  notify:
   - restart mysql
- name: Deploy mysql config to conf.d
  template:
    src: mysql.cnf.j2
    dest: /etc/mysql/conf.d/mysql.cnf
  notify:
    - restart mysql
- name: Start the mysql services
  service:
    name: "{{ mysql_service }}"
    state: started
    enabled: yes
- name: Change the authentication plugin of MySQL root user to mysql_native_password
  shell: mysql -u root -e 'UPDATE mysql.user SET plugin="mysql_native_password" WHERE user="root" AND host="localhost"'
- name: Flush Privileges
  shell: mysql -u root -e 'FLUSH PRIVILEGES'

- name: Update mysql root password
  mysql_user:
    login_host: 'localhost'
    login_user: 'root'
    login_password: ''
    name: 'root'
    password: "{{ mysql_root_db_pass }}"
    state: present

- name: Copy .my.cnf file with root password credentials
  template:
    src: .my.cnf.j2
    dest: ~/.my.cnf
    mode: 0600
- name: Create the replication users
  mysql_user:
    name: "{{ item.name }}"
    host: "%"
    password: "{{ item.pass }}"
    priv: "*.*:REPLICATION SLAVE"
    state: present
  with_items:
    - "{{ mysql_repl_user }}"
  when: mysql_repl_role == 'master'
- name: Change the authentication plugin of MySQL repl user to mysql_native_password
  shell: mysql -u root -e 'UPDATE mysql.user SET plugin="mysql_native_password" WHERE user="repl" AND host="localhost"'
- name: Check if slave is already configured for replication
  mysql_replication:
    mode: getslave
  ignore_errors: true
  register: slave
  when: mysql_repl_role == 'slave'
- name: Get the current master servers replication status
  mysql_replication:
    mode: getmaster
  delegate_to: "{{ mysql_repl_master }}"
  register: repl_stat
  when: slave is search("Server is not configured as mysql replica") and mysql_repl_role == 'slave' and mysql_repl_master is defined
- name: Change the master in slave to start the replication
  mysql_replication:
    mode: changemaster
    master_host: "{{ mysql_repl_master }}"
    master_log_file: "{{ repl_stat.File }}"
    master_log_pos: "{{ repl_stat.Position }}"
    master_user: "{{ mysql_repl_user[0].name }}"
    master_password: "{{ mysql_repl_user[0].pass }}"
  when: slave is search("Server is not configured as mysql replica") and mysql_repl_role == 'slave' and mysql_repl_master is defined
- name: Create the database
  mysql_db:
    name: "{{ item.name }}"
    state: present
  with_items:
    - "{{ mysql_db }}"
  when: mysql_db|lower() != 'none'
- name: Create the database users
  mysql_user:
    name: "{{ item.name }}"
    password: "{{ item.pass }}"
    priv: "{{ item.priv|default('*.*:ALL') }}"
    state: present
    host: "%"
  with_items:
    - "{{ mysql_users }}"
  when: mysql_users|lower() != 'none'
